{"version":3,"sources":["webpack:///./js/src/components/PrivateRoute.jsx","webpack:///./js/src/components/SPA.jsx","webpack:///./js/src/utils/Token.jsx","webpack:///./js/src/utils/UserContext.jsx"],"names":["PrivateRoute","Component","component","rest","useContext","UserContext","user","props","getUser","token","pathname","state","from","location","propTypes","PropTypes","func","string","Index","LoadableLogin","Loadable","loader","loading","Loading","LoadableMe","SPAInner","setUser","refreshTokenFetch","fetch","configMap","secureProtocol","refreshTokenUrl","method","credentials","headers","logoutFetch","logoutUrl","authorization","refreshToken","response","json","answer","authToken","error","MakeError","document","reload","window","httpLink","HttpLink","uri","graphqlUrl","request","operation","isTokenExpired","setContext","Authorization","cache","InMemoryCache","client","ApolloClient","link","ApolloLink","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","log","onError","graphQLErrors","networkError","hasTokenInvalid","forEach","debugMessage","Observable","observer","message","next","forward","handle","Promise","resolve","then","oper","subscribe","bind","complete","unsubscribe","writeData","data","isLoggedIn","SPA","parseInt","jwtDecode","exp","Math","round","Date","getTime","uID","isLoggedInEvent","CustomEvent","detail","dispatchEvent","React","createContext","UserProvider","useState","anonymusToken","children","object"],"mappings":"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","file":"1.concrete5_graphql_websocket_security_sample.js","sourcesContent":["import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport {UserContext} from 'Utils/UserContext';\n// eslint-disable-next-line no-unused-vars\nimport log from \"Log\";\nimport { getUser } from \"../utils/Token\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n    const [user] = useContext(UserContext);\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                getUser(user.token) ? (\n                    <Component {...props} />\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: props.location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\nPrivateRoute.propTypes = {\n    component: PropTypes.func,\n    location: PropTypes.string\n};\n\nexport default PrivateRoute;\n","import React, { useState, useContext } from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport fetch from \"unfetch\";\n\nimport ApolloClient from \"apollo-client\";\nimport { HttpLink } from \"apollo-link-http\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"@apollo/react-hooks\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { RetryLink } from \"apollo-link-retry\";\nimport { onError } from \"apollo-link-error\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport Loadable from \"react-loadable\";\nimport Loading from \"./Loading\";\n\nimport PrivateRoute from \"./PrivateRoute\";\n\nimport configMap from \"Utils/GetGlobals\";\nimport {\n    getUser,\n    isTokenExpired\n} from \"Utils/Token\";\nimport MakeError from \"Utils/MakeError\";\nimport {UserContext, UserProvider} from \"Utils/UserContext\";\n// eslint-disable-next-line no-unused-vars\nimport log from \"Log\";\n\nfunction Index() {\n    return (\n        <div>\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <h2>Home</h2>\n            <Link to=\"/me\">Me</Link>\n        </div>\n    );\n}\n\nconst LoadableLogin = Loadable({\n    loader: () => import(\"../single_pages/Login\"),\n    loading: Loading\n});\n\nconst LoadableMe = Loadable({\n    loader: () => import(\"../single_pages/Me\"),\n    loading: Loading\n});\n\nfunction SPAInner() {\n    const [user, setUser] = useContext(UserContext);\n\n    const refreshTokenFetch = () =>\n        fetch(\n            (configMap.secureProtocol ? \"https://\" : \"http://\") +\n                configMap.refreshTokenUrl,\n            {\n                method: \"POST\",\n                credentials: \"include\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n        );\n\n    const logoutFetch = () =>\n        fetch(\n            (configMap.secureProtocol ? \"https://\" : \"http://\") +\n                configMap.logoutUrl,\n            {\n                method: \"POST\",\n                credentials: \"include\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    authorization: `Bearer ${user.token}`\n                }\n            }\n        );\n\n    const refreshToken = async function() {\n        try {\n            const response = await refreshTokenFetch();\n            const answer = await response.json();\n\n            if (!answer.authToken && getUser(user.token)) {\n                const response = await logoutFetch();\n                const answer = await response.json();\n\n                if (!answer.error || answer.error !== \"\") {\n                    setUser({ token: answer.authToken });\n                }\n            } else {\n                setUser({token: answer.authToken});\n            }\n        } catch (error) {\n            // full control over handling token fetch Error\n            MakeError(\"Your refresh token is invalid. Try to relogin\", error);\n\n            // your custom action here\n            setUser({});\n\n            document.location.reload(true);\n            window.location = \"/\";\n        }\n    };\n\n    const httpLink = new HttpLink({\n        uri:\n            (configMap.secureProtocol ? \"https://\" : \"http://\") +\n            configMap.graphqlUrl\n    });\n\n    const request = async operation => {\n        if (isTokenExpired(user.token)) {\n            await refreshToken();\n        }\n        operation.setContext({\n            headers: { Authorization: \"Bearer \" + user.token }\n        });\n    };\n\n    const cache = new InMemoryCache(); //.restore(window.__APOLLO_STATE__);\n\n    const client = new ApolloClient({\n        link: ApolloLink.from([\n            new RetryLink({\n                delay: {\n                    initial: 300,\n                    max: Infinity,\n                    jitter: true\n                },\n                attempts: {\n                    max: 5,\n                    retryIf: error => log(\"retry\") && !!error\n                }\n            }),\n            onError(({ graphQLErrors, networkError, response }) => {\n                let hasTokenInvalid = true;\n                if (graphQLErrors) {\n                    graphQLErrors.forEach(async (error) => {\n                        hasTokenInvalid &= !error.debugMessage;\n                        log(hasTokenInvalid);\n                    });\n                }\n\n                if (hasTokenInvalid) {\n                    return new Observable(async observer => {\n                        if (graphQLErrors) {\n                            graphQLErrors.forEach(async (message) => {\n                                log(`[GraphQL error]: Message: ${message}`);\n                                await refreshToken();\n                            });\n\n                            return observer.next(response);\n                        }\n                        if (networkError) {\n                            log(`[Network error]: ${networkError}`);\n                            log(networkError);\n                        }\n                    });\n                }\n            }),\n            new ApolloLink(\n                (operation, forward) =>\n                    new Observable(observer => {\n                        let handle;\n                        Promise.resolve(operation)\n                            .then(oper => request(oper))\n                            .then(() => {\n                                handle = forward(operation).subscribe({\n                                    next: observer.next.bind(observer),\n                                    error: observer.error.bind(observer),\n                                    complete: observer.complete.bind(observer)\n                                });\n                            })\n                            .catch(observer.error.bind(observer));\n\n                        return () => {\n                            if (handle) handle.unsubscribe();\n                        };\n                    })\n            ),\n            httpLink\n        ]),\n        cache: cache\n    });\n\n    cache.writeData({\n        data: {\n            isLoggedIn: getUser(user.token)\n        }\n    });\n\n    return (\n        <ApolloProvider client={client}>\n            <ApolloHooksProvider client={client}>\n                <Router hashType=\"hashbang\">\n                    <div>\n                        <Route path=\"/\" exact component={Index} />\n                        <Route path=\"/login\" component={LoadableLogin} />\n                        <PrivateRoute path=\"/me\" component={LoadableMe} />\n                    </div>\n                </Router>\n            </ApolloHooksProvider>\n        </ApolloProvider>\n    );\n}\n\nfunction SPA() {\n    return (\n        <UserProvider>\n            <SPAInner />\n        </UserProvider>\n    );\n}\n\nexport default SPA;\n","import jwtDecode from \"jwt-decode\";\n\n// eslint-disable-next-line no-unused-vars\nimport log from \"Log\";\n\nconst isTokenExpired = function(token) {\n    if (\n        token &&\n        parseInt(jwtDecode(token).exp) - 15 >\n            Math.round(new Date().getTime() / 1000)\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nconst getUser = function(token) {\n    if (token) {\n        const user = jwtDecode(token).data.user;\n        if (parseInt(user.uID) > 0) {\n            const isLoggedInEvent = new CustomEvent(\"isloggedin\", {\n                detail: user\n            });\n            window.dispatchEvent(isLoggedInEvent);\n\n            return user;\n        }\n    }\n    return false;\n};\n\nexport { getUser, isTokenExpired };\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport configMap from \"Utils/GetGlobals\";\n\nconst UserContext = React.createContext([{}, () => {}]);\n\nconst UserProvider = props => {\n    const [user, setUser] = useState({ token: configMap.anonymusToken });\n    return (\n        <UserContext.Provider value={[user, setUser]}>\n            {props.children}\n        </UserContext.Provider>\n    );\n};\n\nUserProvider.propTypes = {\n    children: PropTypes.object\n};\n\nexport { UserContext, UserProvider };\n"],"sourceRoot":""}