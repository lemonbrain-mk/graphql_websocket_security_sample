{"version":3,"sources":["webpack:///./js/src/components/PrivateRoute.jsx","webpack:///./js/src/components/SPA.jsx"],"names":["PrivateRoute","Component","component","rest","useState","isLoggedIn","setIsLoggedIn","useEffect","handleIsLoggedInChange","e","detail","parseInt","uID","window","addEventListener","removeEventListener","isLoggedInInput","getIsLoggedIn","props","pathname","state","from","location","propTypes","PropTypes","func","string","Index","refreshTokenFetch","fetch","configMap","secureProtocol","refreshTokenUrl","method","credentials","headers","logoutFetch","logoutUrl","authorization","getToken","refreshToken","response","json","answer","authToken","error","MakeError","setLoggedOut","document","reload","LoadableLogin","Loadable","loader","loading","Loading","LoadableMe","httpLink","HttpLink","uri","graphqlUrl","request","operation","isTokenExpired","setContext","Authorization","cache","InMemoryCache","client","ApolloClient","link","ApolloLink","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","log","onError","graphQLErrors","networkError","forward","hasTokenInvalid","forEach","index","debugMessage","Observable","observer","message","next","handle","Promise","resolve","then","oper","subscribe","bind","complete","unsubscribe","writeData","data","SPA","React"],"mappings":"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","file":"1.concrete5_graphql_websocket_security_sample.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { getIsLoggedIn } from \"Utils/Token\";\n// eslint-disable-next-line no-unused-vars\nimport log from \"Log\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    useEffect(() => {\n        function handleIsLoggedInChange(e) {\n            setIsLoggedIn(e.detail && parseInt(e.detail.uID) > 0);\n        }\n        window.addEventListener(\"isloggedin\", handleIsLoggedInChange);\n        return () => {\n            window.removeEventListener(\"isloggedin\", handleIsLoggedInChange);\n        };\n    });\n    const isLoggedInInput = isLoggedIn || getIsLoggedIn();\n    //TODO: creates a lot of rerenders\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                isLoggedInInput ? (\n                    <Component {...props} />\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: props.location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\nPrivateRoute.propTypes = {\n    component: PropTypes.func,\n    location: PropTypes.string\n};\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport fetch from \"unfetch\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport ApolloClient from \"apollo-client\";\nimport { HttpLink } from \"apollo-link-http\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"@apollo/react-hooks\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { RetryLink } from \"apollo-link-retry\";\nimport { onError } from \"apollo-link-error\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport Loadable from \"react-loadable\";\nimport Loading from \"./Loading\";\n\nimport PrivateRoute from \"./PrivateRoute\";\n\nimport configMap from \"Utils/GetGlobals\";\nimport {\n    getToken,\n    getIsLoggedIn,\n    setIsLoggedIn,\n    setLoggedOut,\n    isTokenExpired\n} from \"Utils/Token\";\nimport MakeError from \"Utils/MakeError\";\n// eslint-disable-next-line no-unused-vars\nimport log from \"Log\";\n\nfunction Index() {\n    return (\n        <div>\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <h2>Home</h2>\n            <Link to=\"/me\">Me</Link>\n        </div>\n    );\n}\n\nconst refreshTokenFetch = () =>\n    fetch(\n        (configMap.secureProtocol ? \"https://\" : \"http://\") +\n            configMap.refreshTokenUrl,\n        {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n    );\n\nconst logoutFetch = () =>\n    fetch(\n        (configMap.secureProtocol ? \"https://\" : \"http://\") +\n            configMap.logoutUrl,\n        {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${getToken()}`\n            }\n        }\n    );\n\nconst refreshToken = async function() {\n    try {\n        const response = await refreshTokenFetch();\n        const answer = await response.json();\n\n        if (!answer.authToken || !setIsLoggedIn(answer.authToken)) {\n            const response = await logoutFetch();\n            const answer = await response.json();\n\n            if (!answer.error || answer.error !== \"\") {\n                setIsLoggedIn(answer.authToken);\n            }\n        }\n    } catch (error) {\n        // full control over handling token fetch Error\n        MakeError(\"Your refresh token is invalid. Try to relogin\", error);\n\n        // your custom action here\n        setLoggedOut();\n\n        document.location.reload(true);\n        window.location = \"/\";\n    }\n};\n\nconst LoadableLogin = Loadable({\n    loader: () => import(\"../single_pages/Login\"),\n    loading: Loading\n});\n\nconst LoadableMe = Loadable({\n    loader: () => import(\"../single_pages/Me\"),\n    loading: Loading\n});\n\nconst httpLink = new HttpLink({\n    uri:\n        (configMap.secureProtocol ? \"https://\" : \"http://\") +\n        configMap.graphqlUrl\n});\n\nconst request = async operation => {\n    if (isTokenExpired()) {\n        await refreshToken();\n    }\n    operation.setContext({\n        headers: { Authorization: \"Bearer \" + getToken() }\n    });\n};\n\nconst cache = new InMemoryCache(); //.restore(window.__APOLLO_STATE__);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new RetryLink({\n            delay: {\n                initial: 300,\n                max: Infinity,\n                jitter: true\n            },\n            attempts: {\n                max: 5,\n                retryIf: error => log(\"retry\") && !!error\n            }\n        }),\n        onError(\n            ({\n                graphQLErrors,\n                networkError,\n                operation,\n                forward,\n                response\n            }) => {\n                let hasTokenInvalid = true;\n                if (graphQLErrors) {\n                    graphQLErrors.forEach(async (error, index) => {\n                        hasTokenInvalid &= !error.debugMessage;\n                        log(hasTokenInvalid);\n                    });\n                }\n\n                if (hasTokenInvalid) {\n                    return new Observable(async observer => {\n                        if (graphQLErrors) {\n                            graphQLErrors.forEach(\n                                async (message, index) => {\n                                    log(\n                                        `[GraphQL error]: Message: ${message}`\n                                    );\n                                    await refreshToken();\n                                }\n                            );\n\n                            return observer.next(response);\n                        }\n                        if (networkError) {\n                            log(`[Network error]: ${networkError}`);\n                            log(networkError);\n                        }\n                    });\n                }\n            }\n        ),\n        new ApolloLink(\n            (operation, forward) =>\n                new Observable(observer => {\n                    let handle;\n                    Promise.resolve(operation)\n                        .then(oper => request(oper))\n                        .then(() => {\n                            handle = forward(operation).subscribe({\n                                next: observer.next.bind(observer),\n                                error: observer.error.bind(observer),\n                                complete: observer.complete.bind(observer)\n                            });\n                        })\n                        .catch(observer.error.bind(observer));\n\n                    return () => {\n                        if (handle) handle.unsubscribe();\n                    };\n                })\n        ),\n        httpLink\n    ]),\n    cache: cache\n});\n\ncache.writeData({\n    data: {\n        isLoggedIn: getIsLoggedIn()\n    }\n});\n\nclass SPA extends React.Component {\n    render() {\n        return (\n            <ApolloProvider client={client}>\n                <ApolloHooksProvider client={client}>\n                    <Router hashType=\"hashbang\">\n                        <div>\n                            <Route path=\"/\" exact component={Index} />\n                            <Route path=\"/login\" component={LoadableLogin} />\n                            <PrivateRoute path=\"/me\" component={LoadableMe} />\n                        </div>\n                    </Router>\n                </ApolloHooksProvider>\n            </ApolloProvider>\n        );\n    }\n}\nexport default SPA;\n"],"sourceRoot":""}