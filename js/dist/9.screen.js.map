{"version":3,"sources":["webpack:///./js/src/components/Multimedia.jsx"],"names":["GET_MULTIMEDIA_ITEM","gql","_templateObject","Multimedia","props","_this","_classCallCheck","this","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","url","undefined","split","functionToCheck","toString","event","data","YT","PlayerState","ENDED","isFunction","target","stopVideo","setTimeout","playVideo","state","onStateChange","bind","onReady","React","Component","mute","_this2","originSrc","String","window","location","protocol","host","classes","opts","height","width","origin","encodeURIComponent","playerVars","autoplay","controls","enablejsapi","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","className","root","react_apollo__WEBPACK_IMPORTED_MODULE_2__","query","pollInterval","configMap","defaultPollIntervall","_ref","loading","error","concat","message","getMultimediaItem","map","multimediaItem","key","item_id","react_youtube__WEBPACK_IMPORTED_MODULE_5__","videoId","youtubeGetID","youtube_link","text","propTypes","PropTypes","object","isRequired","withStyles","theme","flexGrow","paper","padding","spacing","unit","textAlign","color","palette","secondary"],"mappings":"izCAcA,IAYMA,EAAsBC,IAAHC,KAUnBC,cACF,SAAAA,EAAYC,GAAO,IAAAC,MAAA,mGAAAC,CAAAC,KAAAJ,KACfI,OAAAC,EAAAL,GAAAM,KAAAF,KAAMH,GAANC,mDADeK,EAAAC,EAAAN,GAAA,eASJ,SAAUO,GAErB,YAAmBC,KADnBD,EAAMA,EAAIE,MAAM,0CACJ,GAAoBF,EAAI,GAAGE,MAAM,iBAAiB,GAAKF,EAAI,KAXxDF,EAAAC,EAAAN,GAAA,aAcN,SAAUU,GACnB,OAAOA,GAAyD,sBAAtC,GAAGC,SAASP,KAAKM,KAf5BL,EAAAC,EAAAN,GAAA,gBAuBH,SAACY,GACTA,EAAMC,MAAQC,GAAGC,YAAYC,OACzBhB,EAAKiB,WAAWL,EAAMM,OAAOC,aAC7BP,EAAMM,OAAOC,YACbC,WAAW,WACPR,EAAMM,OAAOG,aACd,QA3BXrB,EAAKsB,MAAQ,GAGbtB,EAAKuB,cAAgBvB,EAAKuB,cAAcC,KAAnBlB,EAAAN,IACrBA,EAAKyB,QAAUzB,EAAKyB,QAAQD,KAAblB,EAAAN,IANAA,wPADE0B,IAAMC,iDAmBnBf,GACJA,EAAMM,OAAOU,OACbhB,EAAMM,OAAOG,6CAcR,IAAAQ,EAAA3B,KACC4B,EAAYC,OAAOC,OAAOC,SAASC,SAAW,KAAOF,OAAOC,SAASE,MACrEC,EAAYlC,KAAKH,MAAjBqC,QACFC,EAAO,CACHC,OAAQ,MACRC,MAAO,MACPC,OAAQC,mBAAmBX,GAC3BY,WAAY,CACRC,SAAU,EACVC,SAAU,GAEdC,YAAa,GAGrB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWb,EAAQc,MACpBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIC,MAAOzD,EACP0D,aAAcC,IAAUC,sBAEvB,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MAAO7C,EAAW2C,EAAX3C,KAChB,OAAI4C,EAAgB,aAChBC,EAAO,UAAAC,OAAiBD,EAAME,SAG9Bd,EAAAC,EAAAC,cAAA,WAEQnC,GAAQA,EAAKgD,kBAAkBC,IAAI,SAACC,GAAD,OAC/BjB,EAAAC,EAAAC,cAAA,OAAKgB,IAAKD,EAAeE,SACrBnB,EAAAC,EAAAC,cAAA,OAAKgB,IAAKD,EAAeE,QAAShB,UAAU,0CACxCH,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACIC,QAAStC,EAAKuC,aAAaL,EAAeM,cAC1ChC,KAAMA,EACNZ,QAASI,EAAKJ,QACdF,cAAeM,EAAKN,iBAG5BuB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBc,EAAeO,kDAa3FxE,EAAWyE,UAAY,CACnBnC,QAASoC,IAAUC,OAAOC,YAGfC,+BA/GA,SAAAC,GAAK,MAAK,CACrB1B,KAAM,CACF2B,SAAU,GAEdC,MAAO,CACHC,QAA8B,EAArBH,EAAMI,QAAQC,KACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQd,KAAKe,aAwGnBV,CAAmB7E","file":"9.screen.js","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\n\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport YouTube from 'react-youtube';\n\nimport configMap from 'Utilities/GetGlobals';\n// eslint-disable-next-line no-unused-vars\nimport log from 'Log';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n});\n\n\nconst GET_MULTIMEDIA_ITEM = gql`\n  query {\n    getMultimediaItem {\n        item_id\n        youtube_link\n        text\n      }\n  }\n`;\n\nclass Multimedia extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n\n        this.onStateChange = this.onStateChange.bind(this);\n        this.onReady = this.onReady.bind(this);\n    }\n\n    youtubeGetID = function (url) {\n        url = url.split(/(vi\\/|v=|\\/v\\/|youtu\\.be\\/|\\/embed\\/)/);\n        return (url[2] !== undefined) ? url[2].split(/[^0-9a-z_\\-]/i)[0] : url[0];\n    };\n\n    isFunction = function (functionToCheck) {\n        return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n    }\n\n    onReady(event) {\n        event.target.mute();\n        event.target.playVideo();\n    }\n\n    onStateChange = (event) => {\n        if (event.data == YT.PlayerState.ENDED) {\n            if (this.isFunction(event.target.stopVideo)) {\n                event.target.stopVideo();\n                setTimeout(function () {\n                    event.target.playVideo();\n                }, 5000);\n            }\n        }\n    }\n\n    render() {\n        const originSrc = String(window.location.protocol + \"//\" + window.location.host),\n            { classes } = this.props,\n            opts = {\n                height: '408',\n                width: '659',\n                origin: encodeURIComponent(originSrc),\n                playerVars: { // https://developers.google.com/youtube/player_parameters\n                    autoplay: 1,\n                    controls: 0\n                },\n                enablejsapi: 1,\n            };\n\n        return (\n            <div className={classes.root}>\n                <Query\n                    query={GET_MULTIMEDIA_ITEM}\n                    pollInterval={configMap.defaultPollIntervall}\n                >\n                    {({ loading, error, data }) => {\n                        if (loading) return \"Loading...\";\n                        if (error) return `Error! ${error.message}`;\n\n                        return (\n                            <div>\n                                {\n                                    data && data.getMultimediaItem.map((multimediaItem) => (\n                                        <div key={multimediaItem.item_id}>\n                                            <div key={multimediaItem.item_id} className=\"item background-video background-image\">\n                                                <YouTube\n                                                    videoId={this.youtubeGetID(multimediaItem.youtube_link)}\n                                                    opts={opts}\n                                                    onReady={this.onReady}\n                                                    onStateChange={this.onStateChange}\n                                                />\n                                            </div>\n                                            <h3 className=\"word-container\">{multimediaItem.text}</h3>\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                        );\n                    }}\n                </Query>\n            </div>\n        );\n    }\n}\n\nMultimedia.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Multimedia);"],"sourceRoot":""}