{"version":3,"sources":["webpack:///./js/src/components/PrivateRoute.jsx","webpack:///./js/src/components/SPA.jsx"],"names":["PrivateRoute","Component","component","rest","console","log","getIsLoggedIn","props","pathname","state","from","location","propTypes","PropTypes","func","string","Index","refreshTokenFetch","fetch","configMap","secureProtocol","refreshTokenUrl","method","credentials","headers","refreshToken","response","json","answer","setIsLoggedIn","authToken","MakeError","setLoggedOut","document","reload","window","LoadableLogin","Loadable","loader","loading","Loading","LoadableMe","httpLink","HttpLink","uri","graphqlUrl","request","operation","isTokenExpired","setContext","Authorization","getToken","cache","InMemoryCache","client","ApolloClient","link","ApolloLink","forward","Observable","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","unsubscribe","writeData","data","isLoggedIn","SPA","React"],"mappings":"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","file":"2.concrete5_graphql_websocket_security_sample.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport { getIsLoggedIn } from \"Utils/Token\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n    console.log('test');\n    console.log(getIsLoggedIn());\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        getIsLoggedIn() ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nPrivateRoute.propTypes = {\n    component: PropTypes.func,\n    location: PropTypes.string,\n};\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport fetch from \"unfetch\";\n\nimport ApolloClient from \"apollo-client\";\nimport { HttpLink } from \"apollo-link-http\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"@apollo/react-hooks\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\n\nimport Loadable from \"react-loadable\";\nimport Loading from \"./Loading\";\n\nimport PrivateRoute from \"./PrivateRoute\";\n\nimport configMap from \"Utils/GetGlobals\";\nimport { getToken, getIsLoggedIn, setIsLoggedIn, setLoggedOut, isTokenExpired } from \"Utils/Token\";\nimport MakeError from \"Utils/MakeError\";\n// eslint-disable-next-line no-unused-vars\nimport log from \"Log\";\n\nfunction Index() {\n    return (\n        <div>\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <h2>Home</h2>\n            <Link to=\"/me\">Me</Link>\n        </div>\n    );\n}\n\nconst refreshTokenFetch = () =>\n    fetch(\n        (configMap.secureProtocol ? \"https://\" : \"http://\") +\n            configMap.refreshTokenUrl,\n        {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n    );\n\n    const refreshToken = async function() {\n        try {\n            const response = await refreshTokenFetch();\n            const answer = await response.json();\n            log(answer);\n            setIsLoggedIn(answer.authToken);\n        } catch (error) {\n            // full control over handling token fetch Error\n            MakeError(\"Your refresh token is invalid. Try to relogin\", error);\n    \n            // your custom action here\n            setLoggedOut();\n    \n            document.location.reload(true);\n            window.location = \"/\";\n        }\n    };\n\nconst LoadableLogin = Loadable({\n    loader: () => import(\"../single_pages/Login\"),\n    loading: Loading\n});\n\nconst LoadableMe = Loadable({\n    loader: () => import(\"../single_pages/Me\"),\n    loading: Loading\n});\n\nconst httpLink = new HttpLink({\n    uri:\n        (configMap.secureProtocol ? \"https://\" : \"http://\") +\n        configMap.graphqlUrl,\n});\n\nconst request = async operation => {\n    if (isTokenExpired()) {\n        await refreshToken();\n    }\n    operation.setContext({\n        headers: { Authorization: \"Bearer \" + getToken() }\n    });\n};\n\nconst cache = new InMemoryCache(); //.restore(window.__APOLLO_STATE__);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new ApolloLink(\n            (operation, forward) =>\n                new Observable(observer => {\n                    let handle;\n                    Promise.resolve(operation)\n                        .then(oper => request(oper))\n                        .then(() => {\n                            handle = forward(operation).subscribe({\n                                next: observer.next.bind(observer),\n                                error: observer.error.bind(observer),\n                                complete: observer.complete.bind(observer)\n                            });\n                        })\n                        .catch(observer.error.bind(observer));\n\n                    return () => {\n                        if (handle) handle.unsubscribe();\n                    };\n                })\n        ),\n        httpLink\n    ]),\n    cache: cache\n});\n\ncache.writeData({\n    data: {\n        isLoggedIn: getIsLoggedIn()\n    }\n});\n\nclass SPA extends React.Component {\n    render() {\n        return (\n            <ApolloProvider client={client}>\n                <ApolloHooksProvider client={client}>\n                    <Router hashType=\"hashbang\">\n                        <div>\n                            <Route path=\"/\" exact component={Index} />\n                            <Route path=\"/login\" component={LoadableLogin} />\n                            <PrivateRoute path=\"/me\" component={LoadableMe} />\n                        </div>\n                    </Router>\n                </ApolloHooksProvider>\n            </ApolloProvider>\n        );\n    }\n}\nexport default SPA;\n"],"sourceRoot":""}