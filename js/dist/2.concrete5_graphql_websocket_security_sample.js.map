{"version":3,"sources":["webpack:///./js/src/components/PrivateRoute.jsx","webpack:///./js/src/components/SPA.jsx","webpack:///./js/src/utils/Token.jsx"],"names":["PrivateRoute","Component","component","rest","props","getIsLoggedIn","pathname","state","from","location","propTypes","PropTypes","object","string","Index","localStorage","setItem","constants","authToken","JSON","parse","configMap","anonymusTokens","refreshToken","LoadableLogin","Loadable","loader","loading","Loading","LoadableMe","httpLink","HttpLink","uri","secureProtocol","graphqlUrl","headers","authorization","getToken","cache","InMemoryCache","client","ApolloClient","link","writeData","data","isLoggedIn","SPA","React","currentToken","getItem","jwtDecode","exp","Date","now","log","currentRefreshToken","clear","parseInt","user","uID","anonymus"],"mappings":"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","file":"2.concrete5_graphql_websocket_security_sample.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport { getIsLoggedIn } from \"Utils/Token\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        getIsLoggedIn() ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nPrivateRoute.propTypes = {\n    component: PropTypes.object,\n    location: PropTypes.string,\n};\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport ApolloClient from \"apollo-client\";\nimport { split } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { WebSocketLink } from \"apollo-link-ws\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"@apollo/react-hooks\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport Loadable from \"react-loadable\";\nimport Loading from \"./Loading\";\n\nimport PrivateRoute from \"./PrivateRoute\";\n\nimport configMap, { constants } from \"Utils/GetGlobals\";\nimport { getToken, getIsLoggedIn } from \"Utils/Token\";\n// eslint-disable-next-line no-unused-vars\nimport log from \"Log\";\n\nfunction Index() {\n  return (\n    <div>\n      <h2>Home</h2>\n            <Link to=\"/me\">Me</Link>\n    </div>\n  );\n}\n\nlocalStorage.setItem(\n  constants.authToken,\n  JSON.parse(configMap.anonymusTokens).authToken\n);\nlocalStorage.setItem(\n  constants.refreshToken,\n  JSON.parse(configMap.anonymusTokens).refreshToken\n);\n\nconst LoadableLogin = Loadable({\n  loader: () => import(\"../single_pages/Login\"),\n  loading: Loading\n});\n\nconst LoadableMe = Loadable({\n  loader: () => import(\"../single_pages/Me\"),\n  loading: Loading\n});\n\nconst httpLink = new HttpLink({\n  uri:\n    (configMap.secureProtocol ? \"https://\" : \"http://\") + configMap.graphqlUrl,\n  headers: { authorization: \"Bearer \" + getToken() }\n});\n\n//https://www.apollographql.com/docs/tutorial/mutations/\n// const wsLink = new WebSocketLink({\n//   uri: (configMap.secureProtocol ? \"wss://\" : \"ws:/\") + configMap.websocketUrl,\n//   options: {\n//     reconnect: true\n//   }\n// });\n\n// const link = split(\n//   ({ query }) => {\n//     const definition = getMainDefinition(query);\n//     return (\n//       definition.kind === \"OperationDefinition\" &&\n//       definition.operation === \"subscription\"\n//     );\n//   },\n//   wsLink,\n//   httpLink\n// );\n\nconst cache = new InMemoryCache(); //.restore(window.__APOLLO_STATE__);\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: cache\n});\n\ncache.writeData({\n  data: {\n    isLoggedIn: getIsLoggedIn()\n  }\n});\n\nclass SPA extends React.Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <ApolloHooksProvider client={client}>\n          <Router hashType=\"hashbang\">\n            <div>\n              <Route path=\"/\" exact component={Index} />\n              <Route path=\"/login\" component={LoadableLogin} />\n              <PrivateRoute path=\"/me\" component={LoadableMe} />\n            </div>\n          </Router>\n        </ApolloHooksProvider>\n      </ApolloProvider>\n    );\n  }\n}\nexport default SPA;\n","import jwtDecode from \"jwt-decode\";\n\nimport { constants } from \"Utils/GetGlobals\";\nimport log from \"Log\";\n\nconst getToken = function() {\n  const currentToken = localStorage.getItem(constants.authToken);\n\n  if (currentToken && jwtDecode(currentToken).exp < Date.now() / 1000) {\n    log(\"refresh\");\n    const currentRefreshToken = localStorage.getItem(constants.refreshToken);\n    localStorage.clear();\n    //refreshToken(currentRefreshToken)\n  }\n\n  return currentToken;\n};\n\nconst getIsLoggedIn = function() {\n  const currentToken = localStorage.getItem(constants.authToken);\n\n  if (currentToken && jwtDecode(currentToken).exp >= Date.now() / 1000) {\n      log(jwtDecode(localStorage.getItem(constants.authToken)));\n    if (\n      parseInt(\n        jwtDecode(localStorage.getItem(constants.authToken)).data.user.uID\n      ) > 0 && jwtDecode(localStorage.getItem(constants.authToken)).data.user.anonymus !== true\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport { getToken, getIsLoggedIn };\n"],"sourceRoot":""}